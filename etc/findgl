#!/usr/bin/python3

import sys, getopt, zipfile, fnmatch
from classfile import file

classpath=["build/jogl-all.jar"]
roots = ["com/jogamp/opengl/GL4bc"]

def usage(out):
    out.write("usage: findgl [-h] [-c CLASSPATH] [-r ROOTS] NAMES...\n")

opts, args = getopt.getopt(sys.argv[1:], "hc:r:")
for o, a in opts:
    if o == "-h":
        usage(sys.stdout)
        sys.exit(0)
    elif o == "-c":
        classpath = a.split(':')
    elif o == "-r":
        roots = a.replace('.', '/').split(':')
if len(args) < 1:
    usage(sys.stderr)
    sys.exit(1)

class notfound(LookupError):
    pass

def findclass(name):
    mangled = name + ".class"
    for jar in classpath:
        with zipfile.ZipFile(open(jar, "rb")) as zf:
            try:
                fp = zf.open(mangled)
            except KeyError:
                raise notfound(name) from None
            with fp:
                return file.classfile.load(fp)

loaded = {}
def loadclass(name):
    if name not in loaded:
        cl = findclass(name)
        tnm = cl.cp[cl.cp[cl.this].nm]
        if tnm != name:
            raise Exception("unexpected class name %r found, expected %r" % (tnm, name))
        loaded[name] = cl
    return loaded[name]

def resolve(roots):
    ret = []
    def rec(cl):
        if cl not in ret:
            ret.append(cl)
            try:
                rec(loadclass(cl.cp[cl.cp[cl.super].nm]))
            except notfound: pass
            for iface in cl.ifaces:
                try:
                    rec(loadclass(cl.cp[cl.cp[iface].nm]))
                except notfound: pass
    for nm in roots:
        rec(loadclass(nm))
    return ret

classes = resolve(roots)

for func in args:
    for cl in classes:
        for mth in cl.methods:
            if fnmatch.fnmatchcase(cl.cp[mth.nm], func):
                sys.stdout.write("%s %s\n" % (cl.cp[mth.nm], cl.cp[cl.cp[cl.this].nm]))
        for fl in cl.fields:
            val = None
            if fl.const:
                val = cl.cp[fl.const]
            if isinstance(val, file.constint):
                val = val.val
            if fnmatch.fnmatchcase(cl.cp[fl.nm], func) or (val is not None and str(val) == func):
                sys.stdout.write("%s %s %r\n" % (cl.cp[fl.nm], cl.cp[cl.cp[cl.this].nm], val))
